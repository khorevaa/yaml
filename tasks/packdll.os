Перем ИндексКлассов;
Перем КаталогBin;
Перем КаталогКлассов;

Процедура ВыполнитьЗапаковку()
	
	ТекущийКаталогЗадачи = ТекущийСценарий().Каталог;

	КаталогПроекта = Новый Файл(ОбъединитьПути(ТекущийКаталогЗадачи, "..")).ПолноеИмя;

	КаталогКлассов = ОбъединитьПути(КаталогПроекта, "./src/Классы/internal/Классы");
	КаталогBin = ОбъединитьПути(КаталогПроекта, "./bin");

	МассивФайловКаталоговВерсий = НайтиФайлы(КаталогBin, "*.*");

	ИндексКлассов = Новый Соответствие;

	Для каждого ФайлКаталогаВерсии Из МассивФайловКаталоговВерсий Цикл
		
		Если Не ФайлКаталогаВерсии.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработатьКаталогВерсии(ФайлКаталогаВерсии);

	КонецЦикла;

	ЗаписатьКлассИндексаЗапаковки(ИндексКлассов);

КонецПроцедуры

Процедура ЗаписатьКлассИндексаЗапаковки(ИндексКлассов)

	ТекстБлока = "// {НАЧАЛО_БЛОК}
	|";

	Для каждого ДанныеВерсии Из ИндексКлассов Цикл
		
		ТекстБлока = ТекстБлока + ПолучитьТекстБлокаДляВерсии(ДанныеВерсии.Ключ, ДанныеВерсии.Значение);
		
	КонецЦикла;
	ТекстБлока = ТекстБлока + "
	|    // {КОНЕЦ_БЛОК}
	|"+ Символы.ПС;

	ФайлКлассаМенеджерЗапакованныхФайлов = ОбъединитьПути(КаталогКлассов, "МенеджерЗапакованныхФайлов.os");
	
	ТекстКлассаМенеджерЗапакованныхФайлов = ПрочитатьФайл(ФайлКлассаМенеджерЗапакованныхФайлов);

	ТекстЗамены = ПолучитьТекстВырезки(ТекстКлассаМенеджерЗапакованныхФайлов);

	ТекстКлассаМенеджерЗапакованныхФайлов = СтрЗаменить(ТекстКлассаМенеджерЗапакованныхФайлов, ТекстЗамены, ТекстБлока);

	ЗаписьТекста = Новый ЗаписьТекста(ФайлКлассаМенеджерЗапакованныхФайлов);
	ЗаписьТекста.ЗаписатьСтроку(ТекстКлассаМенеджерЗапакованныхФайлов);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Функция ПолучитьТекстВырезки(Знач ОригинальныйТекст)
	ИтоговыйТекст = ОригинальныйТекст;

	НачальнаяПозиция = СтрНайти(ИтоговыйТекст, "// {НАЧАЛО_БЛОК}");
	ДлинаТекста = СтрДлина(ИтоговыйТекст);

	ИтоговыйТекст = Прав(ИтоговыйТекст, ДлинаТекста - НачальнаяПозиция + 1);
	
	КонечнаяПозиция = СтрНайти(ИтоговыйТекст, "// {КОНЕЦ_БЛОК}") + СтрДлина(Символы.Таб + "// {КОНЕЦ_БЛОК}");

	ИтоговыйТекст = Лев(ИтоговыйТекст, КонечнаяПозиция);

	Возврат ИтоговыйТекст;
	
КонецФункции

Функция ПрочитатьФайл(Знач ИмяФайла)
	
	ФайлСуществующий = Новый Файл(ИмяФайла);
	Если Не ФайлСуществующий.Существует() Тогда
		ВызватьИсключение СтрШаблон("Не найден файл класса <%1>", ИмяФайла);
	КонецЕсли;

	Чтение = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	Рез  = Чтение.Прочитать();
	Чтение.Закрыть();
	Возврат Рез;

КонецФункции // ПрочитатьФайл()

Функция ПолучитьТекстБлокаДляВерсии(Знач ВерсияФайла, Знач ДанныеФайла)
	
	Если ДанныеФайла.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;

	ШаблонТекст = "
	|	ДобавитьФайлВИндекс(""%1"", ""%2"", ""%3"");
	|";

	ТекстБлокаВерсии = "";

	Для каждого ФайлВерсии Из ДанныеФайла Цикл
	
		ТекстФайлаВерсии = СтрШаблон(ШаблонТекст, ФайлВерсии.Файл, ВерсияФайла,  ФайлВерсии.Класс);
		ТекстБлокаВерсии = ТекстБлокаВерсии + ТекстФайлаВерсии;
		
	КонецЦикла;
	
	Возврат ТекстБлокаВерсии;

КонецФункции 

Процедура ОбработатьКаталогВерсии(Знач ФайлКаталогаВерсии)
	
	ИмяКаталога = ФайлКаталогаВерсии.ИмяБезРасширения;
	ВерсияФайлов = СтрЗаменить(ИмяКаталога, "_", ".");

	МассивФайловDll = НайтиФайлы(ФайлКаталогаВерсии.ПолноеИмя, "*.dll");

	МассивЗапакованныхКлассов = Новый Массив;

	Для каждого ФайлDll Из МассивФайловDll Цикл
	
		Если ФайлDll.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		ИмяФайлаDll = ФайлDll.ИмяБезРасширения;
		ПолныйПутьКФайлуDll = ФайлDll.ПолноеИмя;

		ИмяКлассаDll = СтрШаблон("%1_%2", ИмяФайлаDll, ИмяКаталога);

		ПутьКФайлуКласса = ОбъединитьПути(КаталогКлассов, ИмяКлассаDll + ".os");
		ДанныеФайла = ПолучитBase64Строка(ПолныйПутьКФайлуDll);
		ХешСтрока = ПолучитьХешСтроку(ПолныйПутьКФайлуDll);

		ЗаписатьКласс(ПутьКФайлуКласса, ФайлDll.Имя, ВерсияФайлов, ХешСтрока, ДанныеФайла);

		МассивЗапакованныхКлассов.Добавить(Новый Структура("Файл, Класс", ФайлDll.Имя , ИмяКлассаDll));

	КонецЦикла;

	ИндексКлассов.Вставить(ВерсияФайлов, МассивЗапакованныхКлассов);

КонецПроцедуры

Функция ПолучитьХешСтроку(ПутьКФайлу)

	ХешФайла = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешФайла.ДобавитьФайл(ПутьКФайлу);

	Возврат ХешФайла.ХешСуммаСтрокой;

КонецФункции

Процедура ЗаписатьКласс(ПутьКФайлуКласса, ИмяФайла, ВерсияФайла, ХешСтрока, ДанныеФайла)

	ШаблонТекст = "
	|///////////////////////////////////////////
	|//       ФАЙЛ СОЗДАН АВТОМАТИЧЕСКИ       //
	|///////////////////////////////////////////
	|//
	|// ФАЙЛ: <%1>
	|//
	|
	|// Возвращает версию запакованного файла
	|//
	|Функция Версия() Экспорт
	|	Возврат ""%2"";
	|КонецФункции
	|
	|// Возвращает имя запакованного файла
	|//
	|Функция ИмяФайла() Экспорт
	|	Возврат ""%1"";
	|КонецФункции
	|
	|// Возвращает хеш строку запакованного файла
	|//
	|Функция Хеш() Экспорт
	|	Возврат ""%3"";
	|КонецФункции
	|
	|// Возвращает запакованные данные файла
	|//
	|Функция ДвоичныеДанные() Экспорт
	|	ЗапакованныеДанные = ""%4"";
	|	Возврат ЗапакованныеДанные;
	|КонецФункции
	|
	|";

	ТекстКласса = СтрШаблон(ШаблонТекст, ИмяФайла, ВерсияФайла, ХешСтрока, ДанныеФайла);

	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлуКласса);
	ЗаписьТекста.ЗаписатьСтроку(ТекстКласса);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Функция ПолучитBase64Строка(ПутьКФайлу)

	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
	Строка = Base64Строка(ДвоичныеДанныеФайла);
	Возврат Строка;

КонецФункции

ВыполнитьЗапаковку();
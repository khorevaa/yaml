Перем Токены;
Перем КэшРегулярныхВыражений;

Функция ПрочитатьТокены(Знач СтрокаYaml) Экспорт

  indents = 0;
  lastIndents = 0;
  indentAmount = -1;
  ТокеныСтроки = Новый Массив;

  СтрокаYaml = СтрЗаменить(СтрокаYaml, Строка(Символы.CR+Символы.LF), Символы.ПС);

  Токен = Неопределено;
  Пока (СтрДлина(СтрокаYaml) > 0) Цикл
	
	Для каждого КлючТокена Из Токены Цикл
		
		Токен = ПолучитьТокен(СтрокаYaml, КлючТокена); 
		
		Если НЕ Токен = Неопределено Тогда

			Если Токен.Тип = "comment" Тогда
				Игнорировать = Истина;
				Прервать;
			ИначеЕсли Токен.Тип = "indent" Тогда
				
				lastIndents  = indents;

				Если indentAmount = -1 Тогда
					indentAmount = СтрДлина(Токен.Значение[1]);
				КонецЕсли;
				
				indents = СтрДлина(Токен.Значение[1]) / indentAmount;
				Если indents = lastIndents Тогда
					Игнорировать = Истина;
				ИначеЕсли indents > lastIndents+1 Тогда
					ВызватьИсключение СтрШаблон("Не верный идентификатор, всего %1 из %2 ", indents, lastIndents + 1);
					// throw new SyntaxError('invalid indentation, got ' + indents + ' instead of ' + (lastIndents + 1))
				ИначеЕсли indents < lastIndents Тогда	
				
					ДопЗначение = СтрокаYaml;
					Токен = НовыйТокен("dedent");
					Токен.ДопЗначение = ДопЗначение;

					Пока lastIndents > indents Цикл
						ТокеныСтроки.Добавить(Токен);
						lastIndents = lastIndents - 1;
					КонецЦикла;

				КонецЕсли; 

			КонецЕсли;
				
		КонецЕсли;
        Прервать; 
	КонецЦикла;
	
	Если НЕ Игнорировать Тогда
		Если НЕ Токен = Неопределено Тогда
			ТокеныСтроки.Добавить(Токен);
			Токен = Неопределено;
		
		Иначе 
			ВызватьИсключение "Ошибка парсинга токенов строки";//throw new SyntaxError(context(str))
		КонецЕсли; 
		Игнорировать = Ложь;
	КонецЕсли;

  КонецЦикла;

  Возврат ТокеныСтроки;

КонецФункции


Функция ПолучитьТокен(Токен, Строка)
	Регулярка = КэшРегулярныхВыражений[Токен.Значение];
	Если  Регулярка = Неопределено Тогда
		Регулярка = Новый РегулярноеВыражение(Токен.Значение);
		КэшРегулярныхВыражений.Вставить("Токен.Значение", Регулярка);
	КонецЕсли;

	КоллекцияСовпадений = Регулярка.НайтиСовпадения(Строка);

	Если КоллекцияСовпадений.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивЗначений = Новый Массив;

	Для каждого Совпадение Из КоллекцияСовпадений Цикл
		МассивЗначений.Добавить(Совпадение.Значение);
	КонецЦикла;
	
	Строка = Регулярка.Заменить(Строка, "");
	
	Возврат НовыйТокен(Токен.Ключ, МассивЗначений);

КонецФункции

Функция НовыйТокен(ТипТокена, ЗначениеТокена = "")

	Возврат новый Структура("Тип, Значение, ДопЗначение", ТипТокена, ЗначениеТокена);
	
КонецФункции

Процедура Инициализация()
	
	Токены = Новый Соответствие;
	Токены.Вставить("comment", "#[^\n]*");
	Токены.Вставить("indent", "\n( *)");
	Токены.Вставить("space", " +");
	Токены.Вставить("true", "\b(enabled|true|yes|on)\b");
	Токены.Вставить("false", "\b(disabled|false|no|off)\b");
	Токены.Вставить("null", "\b(null|Null|NULL|~)\b");
	Токены.Вставить("string", """(.*?)""");
	Токены.Вставить("string", "'(.*?)'");
	Токены.Вставить("timestamp", "((\d{4})-(\d\d?)-(\d\d?)(?:(?:[ \t]+)(\d\d?):(\d\d)(?::(\d\d))?)?)");
	Токены.Вставить("float", "(\d+\.\d+)");
	Токены.Вставить("int", "(\d+)");
	Токены.Вставить("doc", "---");
	Токены.Вставить(",", ",");
	Токены.Вставить("{", "\{(?![^\n\}]*\}[^\n]*[^\s\n\}])");
	Токены.Вставить("}", "\}");
	Токены.Вставить("[", "\[(?![^\n\]]*\][^\n]*[^\s\n\]])");
	Токены.Вставить("]", "\]");
	Токены.Вставить("-", "\-");
	Токены.Вставить(":", "[:]");
	Токены.Вставить("string", "(?![^:\n\s]*:[^\/]{2})(([^:,\]\}\n\s]|(?!\n)\s(?!\s*?\n)|:\/\/|,(?=[^\n]*\s*[^\]\}\s\n]\s*\n)|[\]\}](?=[^\n]*\s*[^\]\}\s\n]\s*\n))*)(?=[,:\]\}\s\n]|$)"); 
	Токены.Вставить("id", "([\w][\w -]*)");

	КэшРегулярныхВыражений = Новый Соответствие;

КонецПроцедуры
